#!/usr/bin/env groovy

/*
  Copyright (C) 2018 Collabora Limited
  Author: Guillaume Tucker <guillaume.tucker@collabora.com>

  This module is free software; you can redistribute it and/or modify it under
  the terms of the GNU Lesser General Public License as published by the Free
  Software Foundation; either version 2.1 of the License, or (at your option)
  any later version.

  This library is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
  details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/

/* ----------------------------------------------------------------------------
 * Jenkins parameters

ARCH
  CPU architecture as understood by the Linux kernel build system
DEFCONFIG
  Linux kernel defconfig to build
SRC_TARBALL
  URL of the kernel source tarball
TREE
  URL of the kernel Git repository
TREE_NAME
  Name of the kernel Git repository (tree)
BRANCH
  Name of the kernel branch within the tree
GIT_DESCRIBE
  Output of 'git describe' at the revision of the snapshot
GIT_DESCRIBE_VERBOSE
  Verbose output of 'git describe' at the revision of the snapshot
COMMIT_ID
  Git commit SHA1 at the revision of the snapshot
CC (gcc)
  Name of the compiler
CC_VERSION (7)
  Version of the compiler
PUBLISH (boolean)
  Publish build results via the KernelCI backend API
EMAIL (boolean)
  Send build results via email
KCI_API_URL (https://api.kernelci.org)
  URL of the KernelCI backend API
KCI_TOKEN_ID
  Identifier of the KernelCI backend API token stored in Jenkins
KCI_CORE_URL (https://github.com/kernelci/kernelci-core.git)
  URL of the kernelci-core repository
KCI_CORE_BRANCH (master)
  Name of the branch to use in the kernelci-core repository
DOCKER_BASE
  Dockerhub base address used for the build images
PARALLEL_BUILDS
  Number of kernel builds to run in parallel

 */


@Library('kernelci') _
import org.kernelci.build.Kernel
import org.kernelci.util.Job

def buildConfig(config, kdir, kci_core) {
    def defconfig = sh(script: "echo ${config} | sed 's/\\+/ \\-c /g'",
                       returnStdout: true)
    def opt = "-i"

    if (params.PUBLISH) {
        opt += " -e"
    } else {
        echo "NOT PUBLISHING"
    }

    if (params.PARALLEL_BUILDS)
        opt += " -j${params.PARALLEL_BUILDS}"

    dir(kdir) {
        withCredentials([string(credentialsId: params.KCI_TOKEN_ID,
                                variable: 'SECRET')]) {
            sh(script: """
API=${params.KCI_API_URL} \
TOKEN=${SECRET} \
${kci_core}/build.py \
  ${opt} \
  -c ${defconfig} \
""")
        }
    }

    sh(script: """rm -rf ${kdir}""")
}

node("docker && builder") {
    def j = new Job()
    def docker_image = j.dockerImageName(
        params.DOCKER_BASE, params.CC, params.CC_VERSION, params.ARCH)

    echo("""\
    Tree:      ${params.TREE_NAME}
    URL:       ${params.TREE}
    Branch:    ${params.BRANCH}
    CPU arch:  ${params.ARCH}
    Describe:  ${params.GIT_DESCRIBE}
    Revision:  ${params.COMMIT_ID}
    Config:    ${params.DEFCONFIG}
    Compiler:  ${params.CC} ${params.CC_VERSION}
    Container: ${docker_image}""")

    def k = new Kernel()
    def kci_core = env.WORKSPACE + '/kernelci-core'
    def kdir = env.WORKSPACE + '/linux'

    stage("Init") {
        timeout(time: 30, unit: 'MINUTES') {
            parallel(
                clone: { k.cloneKciCore(kci_core,
                                        params.KCI_CORE_URL,
                                        params.KCI_CORE_BRANCH) },
                download: { k.downloadTarball(kdir, params.SRC_TARBALL) },
            )
        }
    }

    j.dockerPullWithRetry(docker_image).inside() {
        stage("Build") {
            timeout(time: 180, unit: 'MINUTES') {
                buildConfig(params.DEFCONFIG, kdir, kci_core)
            }
        }
    }
}
