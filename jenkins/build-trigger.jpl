#!/usr/bin/env groovy

/*
  Copyright (C) 2018, 2019 Collabora Limited
  Author: Guillaume Tucker <guillaume.tucker@collabora.com>

  This module is free software; you can redistribute it and/or modify it under
  the terms of the GNU Lesser General Public License as published by the Free
  Software Foundation; either version 2.1 of the License, or (at your option)
  any later version.

  This library is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
  details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/

/* ----------------------------------------------------------------------------
 * Jenkins parameters

BUILD_CONFIG
  Name of the build configuration
PUBLISH (boolean)
  Publish build results via the KernelCI backend API
EMAIL (boolean)
  Send build results via email
KCI_API_URL (https://api.kernelci.org)
  URL of the KernelCI backend API
KCI_TOKEN_ID
  Identifier of the KernelCI backend API token stored in Jenkins
KCI_CORE_URL (https://github.com/kernelci/kernelci-core.git)
  URL of the kernelci-core repository
KCI_CORE_BRANCH (master)
  Name of the branch to use in the kernelci-core repository
DOCKER_BASE
  Dockerhub base address used for the build images
ALLOW_REBUILD (false)
  Allow building the same revision again.
*/

@Library('kernelci') _
import org.kernelci.build.Kernel
import org.kernelci.util.Job

def addDefconfigs(configs, kdir, arch, tree_name, branch) {
    def configs_dir = "${kdir}/arch/${arch}/configs"

    if (fileExists(configs_dir)) {
        dir(configs_dir) {
            def found = sh(script: "ls -1 *defconfig || echo -n",
                           returnStdout: true)
            for (String config: found.tokenize(' \n'))
                configs.add(config)
        }
        if (arch == "mips") {
            configs.remove("generic_defconfig")
        }
        if (arch == "arc") {
            // remove any non ARCv2 defconfigs since we only have ARCv2 toolchain
            dir(configs_dir) {
                def found = sh(script: "grep -L CONFIG_ISA_ARCV2 *defconfig || echo -n",
                               returnStdout: true)
                for (String config: found.tokenize(' \n'))
                    configs.remove(config)
            }
	    // also remove "nsim_hs_defconfig" since this will be base_defconfig later
	    configs.remove("nsim_hs_defconfig")
        }
    } else {
        echo("WARNING: No configs directory: ${configs_dir}")
    }

    if (fileExists("${kdir}/kernel/configs/tiny.config"))
        configs.add("tinyconfig")
}

def addExtraIfExists(extra, kdir, path) {
    if (fileExists("${kdir}/${path}"))
        extra.add(path)
}

def addExtraConfigs(configs, kdir, arch, tree_name, branch) {
    def configs_dir = "${kdir}/arch/${arch}/configs"
    def base_defconfig = "defconfig"
    def extra = []

    if (arch == "arc") {
        // default "defconfig" is not ARCv2, and we only have ARCv2 toolchain
        base_defconfig = "nsim_hs_defconfig"
    } else if (arch == "arm") {
        base_defconfig = "multi_v7_defconfig"

        extra = [
            "CONFIG_CPU_BIG_ENDIAN=y",
            "CONFIG_SMP=n",
            "CONFIG_EFI=y+CONFIG_ARM_LPAE=y",
        ]

        if (fileExists("${configs_dir}/mvebu_v7_defconfig"))
            configs.add("mvebu_v7_defconfig+CONFIG_CPU_BIG_ENDIAN=y")

        if (tree_name == "next")
            configs.add("allmodconfig")

        if (tree_name == "ardb" && branch == "arm-kaslr-latest"){
            extra.add("CONFIG_RANDOMIZE_BASE=y")
            extra.add("CONFIG_THUMB2_KERNEL=y+CONFIG_RANDOMIZE_BASE=y")
            configs.add("multi_v5_defconfig")
            configs.add("omap2plus_defconfig+CONFIG_RANDOMIZE_BASE=y")
            configs.add("omap2plus_defconfig")
        }
    } else if (arch == "arm64") {
        configs.add("allmodconfig")

        extra = [
            "CONFIG_CPU_BIG_ENDIAN=y",
            "CONFIG_RANDOMIZE_BASE=y",
        ]
    } else if (arch == "x86") {
        configs.add("allmodconfig")
        addExtraIfExists(extra, kdir, "arch/x86/configs/kvm_guest.config")
    }

    for (String frag: ["debug", "kselftest"])
        addExtraIfExists(extra, kdir, "kernel/configs/${frag}.config")

    if (tree_name == "lsk" || tree_name == "anders") {
        def frags = "linaro/configs/kvm-guest.conf"

        /* For -rt kernels, build with RT fragment */
        def rt_frag = "kernel/configs/preempt-rt.config"

        if (!fileExists("${kdir}/${rt_frag}"))
            rt_frag = "linaro/configs/preempt-rt.conf"

        def has_preempt_rt_full = sh(
            returnStatus: true,
            script: "grep -q \"config PREEMPT_RT_FULL\" ${kdir}/kernel/Kconfig.preempt")

        if (has_preempt_rt_full)
            extra.add(rt_frag)

        if (arch == "arm") {
            def kvm_host_frag = "linaro/configs/kvm-host.conf"
            if (fileExists("${kdir}/${kvm_host_frag}")) {
                def lpae_base = "multi_v7_defconfig+CONFIG_ARM_LPAE=y"
                configs.add("${lpae_base}+${kvm_host_frag}")
            }
        }

        for (String frag: ["linaro-base", "distribution"])
            addExtraIfExists(extra, kdir, "linaro/configs/${frag}.conf")

        if (fileExists("${kdir}/android/configs")) {
            for (String frag: ['base', 'recommended']) {
                def path = "android/configs/android-${frag}.cfg"
                def android_extra = ""

                if (fileExists(path))
                    android_extra += "+${path}"
            }

            if (android_extra) {
                configs.add("${base_defconfig}${android_extra}")

                /* Also build vexpress_defconfig for testing on QEMU */
                configs.add("vexpress_defconfig${android_extra}")
            }
        }
    }

    addExtraIfExists(extra, kdir, "kernel/configs/virtualvideo.config")

    if (!configs.contains(base_defconfig))
        configs.add(base_defconfig)

    for (String e: extra)
        configs.add("${base_defconfig}+${e}")
}

def configAlreadyBuilt(config, kci_core) {
    def new_commit = sh(
        script: """
${kci_core}/kci_build \
--build-configs=${kci_core}/build-configs.yaml \
--config=${config} \
--storage=${params.KCI_STORAGE_URL} \
check_new_commit""", returnStdout: true).trim()

    return (new_commit == "")
}

def pushTarball(config, kci_core, mirror, kdir, opts) {
    sh(script: """\
${kci_core}/kci_build \
--build-configs=${kci_core}/build-configs.yaml \
--config=${config} \
--mirror=${mirror} \
update_mirror""")

    sh(script: """\
${kci_core}/kci_build \
--build-configs=${kci_core}/build-configs.yaml \
--config=${config} \
--kdir=${kdir} \
--mirror=${mirror} \
update_repo""")

    def describe_raw = sh(script: """\
${kci_core}/kci_build \
--build-configs=${kci_core}/build-configs.yaml \
--config=${config} \
--kdir=${kdir} \
describe""", returnStdout: true).trim()
    def describe_list = describe_raw.tokenize('\n')
    opts['commit'] = describe_list[0]
    opts['describe'] = describe_list[1]
    opts['describe_verbose'] = describe_list[2]

    withCredentials([string(credentialsId: params.KCI_TOKEN_ID,
                            variable: 'SECRET')]) {
        sh(script: """\
${kci_core}/kci_build \
--build-configs=${kci_core}/build-configs.yaml \
--config=${config} \
--kdir=${kdir} \
--commit=${opts['commit']} \
--storage=${params.KCI_STORAGE_URL} \
--api=${params.KCI_API_URL} \
--token=${SECRET} \
update_last_commit""")

        opts['tarball_url'] = sh(script: """\
${kci_core}/kci_build \
--build-configs=${kci_core}/build-configs.yaml \
--config=${config} \
--kdir=${kdir} \
--storage=${params.KCI_STORAGE_URL} \
--api=${params.KCI_API_URL} \
--token=${SECRET} \
push_tarball""", returnStdout: true).trim()
    }
}

def listConfigs(config, kci_core, kdir, opts) {
    def tree_name = null
    def branch = null
    def arch_list = null
    def arch_configs = []

    dir(kci_core) {
        def opts_raw = sh(
            script: """\
./kci_build \
--kdir=${kdir} \
--config=${config} \
tree_branch""", returnStdout: true).trim()
        def opt_list = opts_raw.tokenize('\n')
        tree_name = opt_list[0]
        branch = opt_list[2]
        opts['tree'] = tree_name
        opts['git_url'] = opt_list[1]
        opts['branch'] = branch

        def raw_arch_list = sh(
            script: """\
./kci_build \
--kdir=${kdir} \
--config=${config} \
arch_list""", returnStdout: true).trim()
        arch_list = raw_arch_list.tokenize('\n')
        opts['arch_list'] = arch_list
    }

    for (String arch: arch_list) {
        def configs = ["allnoconfig"]

        addDefconfigs(configs, kdir, arch, tree_name, branch)

        if ((tree_name != "stable") && (tree_name != "stable-rc"))
            addExtraConfigs(configs, kdir, arch, tree_name, branch)

        for (String kernel_config: configs)
            arch_configs.add([arch, kernel_config])
    }

    return arch_configs
}

def buildKernelStep(job, arch, config, opts, cc='gcc', cc_version='7') {
    def str_params = [
        'ARCH': arch,
        'DEFCONFIG': config,
        'TREE': opts['git_url'],
        'TREE_NAME': opts['tree'],
        'GIT_DESCRIBE': opts['describe'],
        'GIT_DESCRIBE_VERBOSE': opts['describe_verbose'],
        'COMMIT_ID': opts['commit'],
        'BRANCH': opts['branch'],
        'SRC_TARBALL': opts['tarball_url'],
        'CC': cc,
        'CC_VERSION': cc_version,
    ]
    def job_params = []

    def j = new Job()
    j.addStrParams(job_params, str_params)

    return { build(job: job, parameters: job_params, propagate: false) }
}

def buildsComplete(job, opts, arch) {
    def str_params = [
        'TREE_NAME': opts['tree'],
        'ARCH': arch,
        'GIT_DESCRIBE': opts['describe'],
        'BRANCH': opts['branch'],
    ]
    def bool_params = [
        'EMAIL': params.EMAIL,
        'PUBLISH': params.PUBLISH,
    ]
    def job_params = []

    def j = new Job()
    j.addStrParams(job_params, str_params)
    j.addBoolParams(job_params, bool_params)
    build(job: job, parameters: job_params)
}

node("defconfig-creator") {
    def j = new Job()
    def k = new Kernel()
    def kci_core = "${env.WORKSPACE}/kernelci-core"
    def kdir = "${env.WORKSPACE}/configs/${params.BUILD_CONFIG}"
    def mirror = "${env.WORKSPACE}/linux.git"
    def docker_image = "${params.DOCKER_BASE}base"
    def opts = [:]
    def configs = null

    print("""\
    Config:    ${params.BUILD_CONFIG}
    Container: ${docker_image}""")

    j.dockerPullWithRetry(docker_image).inside() {
        stage("Init") {
            timeout(time: 15, unit: 'MINUTES') {
                j.cloneKciCore(
                    kci_core, params.KCI_CORE_URL, params.KCI_CORE_BRANCH)
            }
        }

        if (params.ALLOW_REBUILD != true) {
            if (configAlreadyBuilt(params.BUILD_CONFIG, kci_core)) {
                print("Revision already built, aborting")
                currentBuild.result = 'ABORTED'
                return
            }
        }

        stage("Tarball") {
            pushTarball(params.BUILD_CONFIG, kci_core, mirror, kdir, opts)
        }

        stage("Configs") {
            configs = listConfigs(params.BUILD_CONFIG, kci_core, kdir, opts)
        }

        stage("Build") {
            def builds = [:]
            def i = 0

            for (x in configs) {
                def arch = x[0]
                def config = x[1]

                def step_name = "${i} ${arch} ${config}"
                print(step_name)

                builds[step_name] = buildKernelStep(
                    "kernel-build", arch, config, opts)

                i += 1
            }

            parallel(builds)
        }

        stage("Complete") {
            /* ToDo: convert kernel-arch-complete as a stage in this job */
            for (String arch: opts['arch_list']) {
                buildsComplete("kernel-arch-complete", opts, arch)
            }
        }
    }
}
