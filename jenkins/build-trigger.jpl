#!/usr/bin/env groovy

/*
  Copyright (C) 2018, 2019 Collabora Limited
  Author: Guillaume Tucker <guillaume.tucker@collabora.com>

  This module is free software; you can redistribute it and/or modify it under
  the terms of the GNU Lesser General Public License as published by the Free
  Software Foundation; either version 2.1 of the License, or (at your option)
  any later version.

  This library is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
  details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
*/

/* ----------------------------------------------------------------------------
 * Jenkins parameters

BUILD_CONFIG
  Name of the build configuration
PUBLISH (boolean)
  Publish build results via the KernelCI backend API
EMAIL (boolean)
  Send build results via email
KCI_API_URL (https://api.kernelci.org)
  URL of the KernelCI backend API
KCI_TOKEN_ID
  Identifier of the KernelCI backend API token stored in Jenkins
KCI_CORE_URL (https://github.com/kernelci/kernelci-core.git)
  URL of the kernelci-core repository
KCI_CORE_BRANCH (master)
  Name of the branch to use in the kernelci-core repository
DOCKER_BASE
  Dockerhub base address used for the build images
ALLOW_REBUILD (false)
  Allow building the same revision again.
*/

@Library('kernelci') _
import org.kernelci.build.Kernel
import org.kernelci.util.Job

def configAlreadyBuilt(config, kci_core) {
    def new_commit = null

    dir(kci_core) {
        new_commit = sh(
        script: """
./kci_build \
--config=${config} \
--storage=${params.KCI_STORAGE_URL} \
check_new_commit""", returnStdout: true).trim()
    }

    return (new_commit == "")
}

def pushTarball(config, kci_core, mirror, kdir, opts) {
    dir(kci_core) {
        sh(script: """\
./kci_build \
--config=${config} \
--mirror=${mirror} \
update_mirror""")

        sh(script: """\
./kci_build \
--config=${config} \
--kdir=${kdir} \
--mirror=${mirror} \
update_repo""")

        def describe_raw = sh(script: """\
./kci_build \
--config=${config} \
--kdir=${kdir} \
describe""", returnStdout: true).trim()
        def describe_list = describe_raw.tokenize('\n')
        opts['commit'] = describe_list[0]
        opts['describe'] = describe_list[1]
        opts['describe_verbose'] = describe_list[2]

        withCredentials([string(credentialsId: params.KCI_TOKEN_ID,
                                variable: 'SECRET')]) {
            sh(script: """\
./kci_build \
--config=${config} \
--kdir=${kdir} \
--commit=${opts['commit']} \
--storage=${params.KCI_STORAGE_URL} \
--api=${params.KCI_API_URL} \
--token=${SECRET} \
update_last_commit""")

            sh(script: """\
./kci_build \
--config=${config} \
--kdir=${kdir} \
generate_fragments""")

            opts['tarball_url'] = sh(script: """\
./kci_build \
--config=${config} \
--kdir=${kdir} \
--storage=${params.KCI_STORAGE_URL} \
--api=${params.KCI_API_URL} \
--token=${SECRET} \
push_tarball""", returnStdout: true).trim()
        }
    }
}

def listConfigs(config, kci_core, kdir, config_list) {
    dir(kci_core) {
        def kernel_config_list_raw = sh(script: """\
./kci_build \
--config=${config} \
--kdir=${kdir} \
list_kernel_configs""", returnStdout: true).trim()
        def kernel_config_list = kernel_config_list_raw.tokenize('\n')

        for (String kernel_config_raw: kernel_config_list) {
            def data = kernel_config_raw.tokenize(' ')
            def arch = data[0]
            def defconfig = data[1]
            def cc = data[2]
            def cc_version = data[3]
            config_list.add([arch, defconfig, cc, cc_version])
        }
    }
}

def addBuildOpts(config, kci_core, opts) {
    dir(kci_core) {
        def opts_raw = sh(
            script: """\
./kci_build \
--config=${config} \
tree_branch""", returnStdout: true).trim()
        def opt_list = opts_raw.tokenize('\n')
        opts['tree'] = opt_list[0]
        opts['git_url'] = opt_list[1]
        opts['branch'] = opt_list[2]

        def raw_variants = sh(
            script: """\
./kci_build \
--config=${config} \
list_variants""", returnStdout: true).trim()
        def variants = raw_variants.tokenize('\n')

        def arch_list = []
        for (String variant: variants) {
            def raw_variant_arch_list = sh(
                script: """\
./kci_build \
--config=${config} \
--variant=${variant} \
arch_list""", returnStdout: true).trim()
            def variant_arch_list = raw_variant_arch_list.tokenize('\n')

            for (String arch: variant_arch_list)
                if (!arch_list.contains(arch))
                    arch_list.add(arch)
        }
        opts['arch_list'] = arch_list
    }
}

def buildKernelStep(job, arch, config, opts, cc='gcc', cc_version='7') {
    def str_params = [
        'ARCH': arch,
        'DEFCONFIG': config,
        'TREE': opts['git_url'],
        'TREE_NAME': opts['tree'],
        'GIT_DESCRIBE': opts['describe'],
        'GIT_DESCRIBE_VERBOSE': opts['describe_verbose'],
        'COMMIT_ID': opts['commit'],
        'BRANCH': opts['branch'],
        'SRC_TARBALL': opts['tarball_url'],
        'CC': cc,
        'CC_VERSION': cc_version,
    ]
    def job_params = []

    def j = new Job()
    j.addStrParams(job_params, str_params)

    return { build(job: job, parameters: job_params, propagate: false) }
}

def buildsComplete(job, opts, arch) {
    def str_params = [
        'TREE_NAME': opts['tree'],
        'ARCH': arch,
        'GIT_DESCRIBE': opts['describe'],
        'BRANCH': opts['branch'],
    ]
    def bool_params = [
        'EMAIL': params.EMAIL,
        'PUBLISH': params.PUBLISH,
    ]
    def job_params = []

    def j = new Job()
    j.addStrParams(job_params, str_params)
    j.addBoolParams(job_params, bool_params)
    build(job: job, parameters: job_params)
}

node("defconfig-creator") {
    def j = new Job()
    def k = new Kernel()
    def kci_core = "${env.WORKSPACE}/kernelci-core"
    def kdir = "${env.WORKSPACE}/configs/${params.BUILD_CONFIG}"
    def mirror = "${env.WORKSPACE}/linux.git"
    def docker_image = "${params.DOCKER_BASE}base"
    def opts = [:]
    def configs = []

    print("""\
    Config:    ${params.BUILD_CONFIG}
    Container: ${docker_image}""")

    j.dockerPullWithRetry(docker_image).inside() {
        stage("Init") {
            timeout(time: 15, unit: 'MINUTES') {
                j.cloneKciCore(
                    kci_core, params.KCI_CORE_URL, params.KCI_CORE_BRANCH)
            }
        }

        if (params.ALLOW_REBUILD != true) {
            if (configAlreadyBuilt(params.BUILD_CONFIG, kci_core)) {
                print("Revision already built, aborting")
                currentBuild.result = 'ABORTED'
                return
            }
        }

        stage("Tarball") {
            pushTarball(params.BUILD_CONFIG, kci_core, mirror, kdir, opts)
        }

        stage("Configs") {
            listConfigs(params.BUILD_CONFIG, kci_core, kdir, configs)
        }

        stage("Build") {
            def builds = [:]
            def i = 0

            addBuildOpts(params.BUILD_CONFIG, kci_core, opts)

            for (x in configs) {
                def arch = x[0]
                def config = x[1]
                def cc = x[2]
                def cc_version = x[3]

                def step_name = "${i} ${arch} ${config} ${cc} ${cc_version}"
                print(step_name)

                builds[step_name] = buildKernelStep(
                    "kernel-build", arch, config, opts, cc, cc_version)

                i += 1
            }

            parallel(builds)
        }

        stage("Complete") {
            /* ToDo: convert kernel-arch-complete as a stage in this job */
            for (String arch: opts['arch_list']) {
                buildsComplete("kernel-arch-complete", opts, arch)
            }
        }
    }
}
