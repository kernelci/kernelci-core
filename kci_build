#!/usr/bin/env python
#
# Copyright (C) 2018, 2019 Collabora Limited
# Author: Guillaume Tucker <guillaume.tucker@collabora.com>
#
# This module is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import argparse
import os
import subprocess
import sys
import time

import kernelci.build
import kernelci.configs


# -----------------------------------------------------------------------------
# Commands
#

# ToDo: filter using arch, compiler and defconfig
def cmd_list_configs(configs, args):
    for conf_name in configs['build_configs'].keys():
        print(conf_name)
    return True


def cmd_check_new_commit(configs, args):
    conf = configs['build_configs'][args.config]
    update = kernelci.build.check_new_commit(conf, args.storage)
    if update is False or update is True:
        return update
    print(update)
    return True


def cmd_update_last_commit(configs, args):
    conf = configs['build_configs'][args.config]
    kernelci.build.update_last_commit(conf, args.api, args.token, args.commit)
    return True


def cmd_tree_branch(configs, args):
    conf = configs['build_configs'][args.config]
    print(conf.tree.name)
    print(conf.tree.url)
    print(conf.branch)
    return True


def cmd_update_mirror(configs, args):
    conf = configs['build_configs'][args.config]
    kernelci.build.update_mirror(conf, args.mirror)
    return True


def cmd_update_repo(configs, args):
    conf = configs['build_configs'][args.config]
    kdir = args.kdir or args.config
    kernelci.build.update_repo(conf, kdir, args.mirror)
    return True


def cmd_describe(configs, args):
    conf = configs['build_configs'][args.config]
    commit = kernelci.build.head_commit(conf, args.kdir)
    describe = kernelci.build.git_describe(conf, args.kdir)
    verbose = kernelci.build.git_describe_verbose(conf, args.kdir)
    print(commit)
    print(describe)
    print(verbose or describe)
    return True


def cmd_push_tarball(configs, args):
    conf = configs['build_configs'][args.config]
    func_args = (conf, args.kdir, args.storage, args.api, args.token)
    if not all(func_args):
        print("Invalid arguments")
        return False
    tarball_url = kernelci.build.push_tarball(*func_args)
    if not tarball_url:
        return False
    print(tarball_url)
    return True


def cmd_arch_list(configs, args):
    conf = configs['build_configs'][args.config]
    for arch in conf.arch_list:
        print(arch)
    return True


def cmd_build_environment(configs, args):
    conf = configs['build_configs'][args.config]
    print(conf.build_environment.name)
    print(conf.build_environment.cc)
    print(conf.build_environment.cc_version)
    if args.arch:
        print(conf.build_environment.get_arch_name(args.arch))
    return True

# -----------------------------------------------------------------------------
# Main
#

COMMANDS = dict()
for k in globals().keys():
    split = k.split('cmd_')
    if len(split) == 2:
        func = globals().get(k)
        if callable(func):
            COMMANDS[split[1]] = func


def main(args):
    configs = kernelci.configs.builds_from_yaml(args.build_configs)
    return COMMANDS[args.cmd](configs, args)


if __name__ == '__main__':
    parser = argparse.ArgumentParser("KernelCI build interface")
    parser.add_argument("cmd", choices=COMMANDS.keys(),
                        help="Available commands")
    parser.add_argument("--build-configs", default="build-configs.yaml",
                        help="Path to build configs file")
    parser.add_argument("--config",
                        help="Config name")
    parser.add_argument("--storage", default="https://storage.kernelci.org",
                        help="Storage URL")
    parser.add_argument("--api", default="https://api.kernelci.org",
                        help="Backend API URL")
    parser.add_argument("--token",
                        help="Backend API token")
    parser.add_argument("--commit",
                        help="Git commit identifier")
    parser.add_argument("--mirror",
                        help="Path to the kernel clone directory")
    parser.add_argument("--kdir",
                        help="Path to the kernel clone directory")
    parser.add_argument("--arch",
                        help="CPU architecture")
    args = parser.parse_args()
    status = main(args)
    sys.exit(0 if status is True else 1)
