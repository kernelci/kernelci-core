{# -*- mode: Python -*- -#}
{# SPDX-License-Identifier: LGPL-2.1-or-later -#}

{% set base_template = 'base/' + runtime + '-python.jinja2' %}
{%- extends base_template %}

{% block commands %}
{% block python_imports %}
import os
import sys
import socket
import tarfile
import traceback
import urllib.parse
{% endblock %}

{%- block python_thirdparty_imports %}
import requests
import yaml
{%- endblock %}

{%- block python_local_imports %}
import kernelci.api
import kernelci.config
import kernelci.config.storage
import kernelci.storage
{%- endblock %}

{%- block exception_global_hook %}
# We need to catch all exceptions, otherwise k8s jobs
# might keep looping forever
def handle_exception(exc_type, exc_value, exc_traceback):
    # Your custom exception handling code
    print("Handling uncaught exception:", exc_value)
    print("Exception type:", exc_type.__name__)
    # unfold the traceback
    print("Traceback (most recent call last):")
    while exc_traceback:
        print(f"  File \"{exc_traceback.tb_frame.f_code.co_filename}\", line {exc_traceback.tb_lineno}, in {exc_traceback.tb_frame.f_code.co_name}")
        exc_traceback = exc_traceback.tb_next
    # TODO: Call back to home about exception
    # return code 0 to avoid k8s job looping forever
    sys.exit(0)

# Set the exception hook
sys.excepthook = handle_exception
{%- endblock %}

{%- block python_globals %}
API_CONFIG_YAML = """
{{ kci_yaml_dump(api_config) }}"""
STORAGE_CONFIG_YAML = """
{{ kci_yaml_dump(storage_config) }}"""
NODE = {{ node }}
JOB_NAME = '{{ name }}'
WORKSPACE = '/tmp/kci'
{%- endblock %}

{% block python_base_job -%}
class BaseJob:

    def __init__(self, api_config, node, workspace):
        self._api = self._get_api(api_config)
        self._node = node
        self._workspace = workspace

    def _get_api(self, api_config_yaml):
        api_config = kernelci.config.api.API.load_from_yaml(
            yaml.safe_load(api_config_yaml), name='api'
        )
        if not api_config:
            raise ValueError("API configuration not found")

        api_token = os.getenv('KCI_API_TOKEN')
        if not api_token:
            raise ValueError("KCI_API_TOKEN environment variable not found")

        return kernelci.api.get_api(api_config, api_token)

    def _get_storage(self):
        storage_config = kernelci.config.storage.StorageFactory.from_yaml(
            name='storage', config=yaml.safe_load(STORAGE_CONFIG_YAML)
        )
        if not storage_config:
            return None
        storage_cred = os.getenv('KCI_STORAGE_CREDENTIALS')
        return kernelci.storage.get_storage(storage_config, storage_cred)

    def _get_tarball_url(self, node):
        if node.get('artifacts') and 'tarball' in node['artifacts']:
            return node['artifacts']['tarball']
        if node.get('parent'):
            parent = self._api.node.get(node['parent'])
            return self._get_tarball_url(parent)
        raise ValueError(f"'tarball' artifact not found in node {self._node['id']} ancestors")

    def _get_source(self, url):
        resp = requests.get(url, stream=True)
        resp.raise_for_status()
        tarball_name = os.path.basename(urllib.parse.urlparse(url).path)
        base, ext = tarball_name.split('.tar.')
        with tarfile.open(fileobj=resp.raw, mode=f'r|{ext}') as tarball:
            tarball.extractall(path=self._workspace)
        return os.path.join(self._workspace, base)

    def _run(self, src_path):
        raise NotImplementedError("_run() method required to run job")

    def _submit(self, result):
        node_from_id = self._api.node.get(self._node['id'])
        self._node = node_from_id.copy()
        self._node.update({
            'result': result,
            'state': 'done',
        })
        self._api.node.update(self._node)
        return self._node

    def run(self):
        if self._node.get('debug') and 'dry_run' in self._node['debug']:
            return self.dry_run(self._node['debug']['result'])

        print("Getting kernel source tree...")
        tarball_url = self._get_tarball_url(self._node)
        src_path = self._get_source(tarball_url)
        print(f"Source directory: {src_path}")
        print("Running job...")
        return self._run(src_path)

    def dry_run(self, result):
        print(f"Dry-running job (result: {result})...")
        return result

    def submit(self, result):
        self._submit(result)
{% endblock %}

{% block python_job -%}
class Job(BaseJob):
    pass
{% endblock %}

{% block python_main -%}
def main(args):
    # Sometimes container DNS is failing if k8s node is still booting
    # This is a workaround:
    # test www.google.com until it works or retry 10 times
    for _ in range(30):
        try:
            socket.gethostbyname('www.google.com')
            break
        except socket.gaierror:
            pass
        # sleep 1 second
        time.sleep(1)
    else:
        print("DNS resolution failed, exiting", file=sys.stderr)
        sys.exit(1)

    job = Job({% block python_job_constr %}api_config=API_CONFIG_YAML, node=NODE, workspace=WORKSPACE{% endblock %})
    try:
        results = job.run()
        job.submit(results)
    except requests.exceptions.HTTPError as ex:
        print(ex, file=sys.stderr)
        detail = ex.response.json().get('detail')
        if detail:
            print(detail, file=sys.stderr)
        results = None
    except Exception:
        print(traceback.format_exc())
        results = None

    return results


if __name__ == '__main__':
{%- if always_exit_0 %}
    main(sys.argv)
    sys.exit(0)
{%- else %}
    results = main(sys.argv)
    sys.exit(1 if results is None else 0)
{%- endif %}
{% endblock %}
{%- endblock %}
