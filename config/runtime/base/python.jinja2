{# -*- mode: Python -*- -#}
{# SPDX-License-Identifier: LGPL-2.1-or-later -#}

{% set base_template = 'base/' + runtime + '-python.jinja2' %}
{%- extends base_template %}

{% block commands %}
{% block python_imports %}
import os
import requests
import sys
import tarfile
import traceback
import urllib.parse
import yaml
{% endblock %}

{%- block python_local_imports %}
import kernelci.db
import kernelci.config
{%- endblock %}

{%- block python_globals %}
DB_CONFIG_YAML = """
{{ db_config_yaml }}"""
NODE_ID = '{{ node_id }}'
TARBALL_URL = '{{ tarball_url }}'
WORKSPACE = '/tmp/kci'
{%- endblock %}

{% block python_base_job -%}
class BaseJob:

    def __init__(self, workspace):
        self._workspace = workspace

    def _get_db(self, db_config_yaml):
        db_config = kernelci.config.db.DatabaseFactory.from_yaml(
            'db', yaml.load(db_config_yaml, Loader=yaml.CLoader)
        )
        if not db_config:
            return None

        api_token = os.getenv('API_TOKEN')
        if not api_token:
            return None

        return kernelci.db.get_db(db_config, api_token)

    def _get_source(self, url):
        resp = requests.get(url, stream=True)
        resp.raise_for_status()
        tarball_name = os.path.basename(urllib.parse.urlparse(url).path)
        base, ext = tarball_name.split('.tar.')
        with tarfile.open(fileobj=resp.raw, mode=f'r|{ext}') as tarball:
            tarball.extractall(path=self._workspace)
        return os.path.join(self._workspace, base)

    def _run(self, src_path):
        raise NotImplementedError("_run() method required to run job")

    def _submit(self, result, node_id, db):
        node = db.get_node(node_id)
        node.update({
            'result': result,
            'status': 'complete',
        })
        db.submit({'node': node})
        return node

    def run(self, tarball_url):
        print("Getting kernel source tree...")
        src_path = self._get_source(tarball_url)
        print(f"Source directory: {src_path}")
        print("Running job...")
        return self._run(src_path)

    def submit(self, result, node_id, db_config_yaml):
        db = self._get_db(db_config_yaml)
        if db:
            self._submit(result, node_id, db)
{% endblock %}

{% block python_job -%}
class Job(BaseJob):
    pass
{% endblock %}

{% block python_main -%}
def main(args):
    job = Job({% block python_job_constr %}workspace=WORKSPACE{% endblock %})
    try:
        results = job.run(TARBALL_URL)
    except Exception:
        print(traceback.format_exc())
        results = None

    if NODE_ID and DB_CONFIG_YAML:
        job.submit(results, NODE_ID, DB_CONFIG_YAML)

    return results


if __name__ == '__main__':
    results = main(sys.argv)
    sys.exit(1 if results is None else 0)
{% endblock %}
{%- endblock %}
