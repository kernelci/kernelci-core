{# -*- mode: Python -*- -#}
{# SPDX-License-Identifier: LGPL-2.1-or-later -#}

{%- extends 'base.jinja2' %}

{% block script_init -%}
import os
import sys
import tarfile
import urllib.parse
import yaml

import kernelci.db
import kernelci.config

DB_CONFIG_YAML = """
{{ db_config_yaml }}"""
NODE_ID = "{{ node_id }}"
TARBALL_URL = "{{ tarball_url }}"
WORKSPACE = "{{ workspace }}"
{% endblock %}

{% block script_exit -%}
def _get_db():
    if not DB_CONFIG_YAML:
        return None

    db_config = kernelci.config.db.DatabaseFactory.from_yaml(
        'db', yaml.load(DB_CONFIG_YAML, Loader=yaml.CLoader)
    )
    if not db_config:
        return None

    api_token = os.getenv('API_TOKEN')
    if not api_token:
        return None

    return kernelci.db.get_db(db_config, api_token)


def _get_source(url):
    resp = requests.get(url, stream=True)
    resp.raise_for_status()
    tarball_name = os.path.basename(urllib.parse.urlparse(url).path)
    base, ext = tarball_name.split('.tar.')
    with tarfile.open(fileobj=resp.raw, mode=f'r|{ext}') as tarball:
        tarball.extractall(path=WORKSPACE)
    return os.path.join(WORKSPACE, base)


if __name__ == '__main__':
    print("Getting kernel source tree")
    try:
        src_path = _get_source(TARBALL_URL)
        res = main(sys.argv + [src_path])
    except:
        res = False

    if NODE_ID:
        db = _get_db()
        if db:
            node = db.get_node(NODE_ID)
            node['status'] = "pass" if res else "fail"
            db.submit({'node': node})

    sys.exit(0)
{% endblock %}
