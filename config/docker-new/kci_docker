#!/usr/bin/env python3
#
# Copyright (C) 2022 Collabora Limited
# Author: Guillaume Tucker <guillaume.tucker@collabora.com>
#
# This module is free software; you can redistribute it and/or modify it under
# the terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

import argparse
import io
import json
import sys

from jinja2 import Environment, FileSystemLoader
import docker


def _gen_dockerfile(img_name, params):
    jinja2_env = Environment(loader=FileSystemLoader('.'))
    template = jinja2_env.get_template(f"{img_name}.jinja2")
    return template.render(params)


def _build_image(dockerfile, tag_name, buildargs):
    client = docker.from_env()
    dockerfile_obj = io.BytesIO(dockerfile.encode())
    return client.images.build(
        fileobj=dockerfile_obj, tag=tag_name, buildargs=buildargs
    )


def _dump_dockerfile(dockerfile):
    sep = '--------------------------------------------------' * 2
    print()
    print(sep)
    print(dockerfile)
    print(sep)
    print()


def _dump_log(build_log):
    for chunk in build_log:
        stream = chunk.get('stream') or ""
        for line in stream.splitlines():
            print(line)


def _push_image(base_name, tag_name):
    client = docker.from_env()
    return client.images.push(base_name, tag_name)


def _dump_push_log(log):
    for json_line in log.splitlines():
        line = json.loads(json_line)
        if 'status' in line and 'progressDetail' not in line:
            print(line['status'])


def main(args):
    base_name = args.prefix + args.image
    tag_strings = ([args.arch] if args.arch else []) + (args.fragment or [])
    tag_name = '-'.join(tag_strings)
    name = ':'.join((base_name, tag_name)) if tag_name else base_name
    if args.command == 'name':
        print(name)
        return

    params = {
        'prefix': args.prefix,
        'fragments': [
            f'fragment/{fragment}.jinja2'
            for fragment in args.fragment
        ] if args.fragment else []
    }

    template = '-'.join((args.image, args.arch)) if args.arch else args.image
    dockerfile = _gen_dockerfile(template, params)
    if args.command == 'generate':
        print(dockerfile)
        return
    if args.verbose:
        _dump_dockerfile(dockerfile)

    print(f"Building {name}")
    buildargs = {
        name: value for (name, value) in (
            barg.split('=') for barg in args.build_arg
        )
    } if args.build_arg else {}
    _, build_log = _build_image(dockerfile, name, buildargs)
    if args.verbose:
        _dump_log(build_log)
    if args.push:
        print(f"Pushing {name} to Docker Hub")
        push_log = _push_image(base_name, tag_name)
        if args.verbose:
            _dump_push_log(push_log)


if __name__ == '__main__':
    parser = argparse.ArgumentParser("KernelCI Docker image builder")
    parser.add_argument('command', choices=['build', 'generate', 'name'],
                        help="Command to run")
    parser.add_argument('image',
                        help="Docker image name, e.g. gcc-10:x86")
    parser.add_argument('--prefix', default='kernelci/',
                        help="Docker image tag prefix")
    parser.add_argument('--arch',
                        help="CPU architecture, e.g. x86")
    parser.add_argument('--fragment', action='append',
                        help="Extra fragments, e.g. kernelci")
    parser.add_argument('--build-arg', action='append',
                        help="Build argument to pass to docker build")
    parser.add_argument('--verbose', action='store_true',
                        help="Verbose output")
    parser.add_argument('--push', action='store_true',
                        help="Push the image to Docker Hub after building")
    main(parser.parse_args())
    sys.exit(0)
